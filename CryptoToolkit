# scripts/wallet_management.py

import os
import json
from cryptography.fernet import Fernet

def generate_key():
    """
    Generate a new encryption key.
    
    :return: Encryption key
    """
    key = Fernet.generate_key()
    return key

def save_key(key, file_path):
    """
    Save the encryption key to a file.
    
    :param key: Encryption key
    :param file_path: Path to save the key
    """
    with open(file_path, 'wb') as key_file:
        key_file.write(key)

def load_key(file_path):
    """
    Load the encryption key from a file.
    
    :param file_path: Path to load the key from
    :return: Encryption key
    """
    with open(file_path, 'rb') as key_file:
        key = key_file.read()
    return key

def encrypt_wallet_data(data, key):
    """
    Encrypt wallet data.
    
    :param data: Data to encrypt
    :param key: Encryption key
    :return: Encrypted data
    """
    fernet = Fernet(key)
    encrypted_data = fernet.encrypt(data.encode())
    return encrypted_data

def decrypt_wallet_data(encrypted_data, key):
    """
    Decrypt wallet data.
    
    :param encrypted_data: Encrypted data
    :param key: Encryption key
    :return: Decrypted data
    """
    fernet = Fernet(key)
    decrypted_data = fernet.decrypt(encrypted_data).decode()
    return decrypted_data

def create_wallet(wallet_name, password):
    """
    Create a new cryptocurrency wallet.
    
    :param wallet_name: Name of the wallet
    :param password: Password for the wallet
    """
    key = generate_key()
    save_key(key, f'{wallet_name}_key.key')
    encrypted_password = encrypt_wallet_data(password, key)
    with open(f'{wallet_name}.json', 'wb') as wallet_file:
        wallet_file.write(encrypted_password)

def load_wallet(wallet_name):
    """
    Load an existing cryptocurrency wallet.
    
    :param wallet_name: Name of the wallet
    :return: Decrypted wallet data
    """
    key = load_key(f'{wallet_name}_key.key')
    with open(f'{wallet_name}.json', 'rb') as wallet_file:
        encrypted_password = wallet_file.read()
    decrypted_password = decrypt_wallet_data(encrypted_password, key)
    return decrypted_password

# Example usage:
# create_wallet('my_wallet', 'my_secure_password')
# password = load_wallet('my_wallet')
# print(password)
